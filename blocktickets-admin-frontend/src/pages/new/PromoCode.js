import React, { useEffect, useState } from "react";
import CsvButton from "../../components/new/CSVButton";
import Loading from "../../components/new/Loading";
import toast from "react-hot-toast";
import Select from "../../components/new/Select";
import { useHistory } from "react-router-dom";
import {
  Modal,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button,
  Input,
} from "@windmill/react-ui";
import { SearchIcon } from "../../icons";
import PageTitle from "../../components/Typography/PageTitle";
import TableComp, { CreatePromoTable } from "../../components/Table";
import { PromoCodeServices } from "../../services/api-client";

const tableColumns = [
  {
    title: "S No.",
    key: "serialNumber",
  },
  // {
  //   title: "Quantity",
  //   key: "quantity",
  // },
  {
    title: "Discount Percentage",
    key: "percentage",
  },

  {
    title: "Generated by",
    key: "generatedBy",
  },
  {
    title: "All codes",
    key: "allCodes",
  },
];
const tableColumns2 = [
  {
    title: "S No.",
    key: "serialNumber",
  },
  // {
  //   title: "Quantity",
  //   key: "quantity",
  // },
  {
    title:"Coupon Code",
    key:"code"
  },
  {
    title:"Event",
    key:"event"
  },
  {
    title:"Ticket Type",
    key:"ticketType"
  },
  {
    title: "Each code valid for",
    key: "perCodeQty",
  },
  {
    title: "Discount Percentage",
    key: "percentage",
  },
  {
    title: "Validity",
    key: "validity",
  },
  {
    title: "Generate",
    key: "createPromoCode",
  },
];

const PromoCode = () => {
  const history = useHistory();

  const [pagination, setPagination] = useState({
    page: 1,
    limit: 20,
    total: 0,
  });
  const [discounts, setDiscounts] = useState([]);
  const [events, setEvents] = useState([]);
  const [ticketType, setTicketType] = useState({});
  const [eventLoading, setEventLoading] = useState(false);
  const [eventValue, setEventValue] = useState("");
  const [ticketValue, setTicketvalue] = useState("");
  const setCurrentPage = async (page) => {
    setPagination((prev) => ({ ...prev, page: page }));
    const pageDetails = {
      page: page,
      limit: pagination.limit,
      total: pagination.total,
    };
    await getAllDiscounts(pageDetails);
  };

  const getAllDiscounts = async (pagination) => {
    try {
      const { data } = await PromoCodeServices.getAll(
        pagination.limit,
        pagination.page
      );
      const temp = data?.ticketType;
      setTicketType(temp);
      setDiscounts(data?.all);
      setEvents(data?.events);

      console.log(typeof temp);

      console.log(ticketType);
      setEventLoading(true);

      setPagination((prev) => ({
        ...prev,
        total: data?.meta?.total,
      }));
    } catch (err) {
      console.log(err);
    }
  };

  const handleRedirect = (url) => history.push(url);

  useEffect(() => {
    getAllDiscounts(pagination);
    return () => {};
  }, []);
  return (
    <>
      <div className="flex flex-row justify-between items-center mx-2">
        <PageTitle>Promo Code</PageTitle>

        <CsvButton
          style={{ width: "14rem" }}
          data={[]}
          columns={tableColumns?.map((col) => {
            return {
              id: col?.key,
              displayName: col?.title,
            };
          })}
          filename={`Promo Codes ${new Date().toDateString()}`}
        />
      </div>

      <CreatePromoTable
        columns={tableColumns2}
        getAllDiscounts={getAllDiscounts}
        pagination={pagination}
        events = {events}
        ticketType = {ticketType}
        eventLoading = {eventLoading}
        eventValue = {eventValue}
        setEventValue = {setEventValue}
        ticketValue = {ticketValue}
        setTicketvalue = {setTicketvalue}
      />

      {discounts?.length > 0 && (
        <TableComp
          pagination={pagination}
          columns={tableColumns}
          setCurrentPage={setCurrentPage}
          tableData={discounts.map((discount, index) => {
            return {
              serialNumber:
                (pagination?.page - 1) * pagination?.limit + index + 1,
              // quantity: discount?.quantity,
              percentage: discount?.discountPercentage,
              generatedBy: discount?.createdBy?.email,
              allCodes: (
                <Button
                  className="mx-2"
                  layout="outline"
                  size="small"
                  onClick={() =>
                    handleRedirect(`/app/promo-code/info/${discount?._id}`)
                  }
                >
                  View all codes
                </Button>
              ),
            };
          })}
        />
      )}
    </>
  );
};

export default PromoCode;
